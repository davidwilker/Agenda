unit classe.profissionais;

interface

uses
  FireDAC.Comp.Client, System.SysUtils, Vcl.Forms;

Type
  TProfissionais = Class
  private

    FConexao          : TFdConnection;
    FId_Profissional  : Integer;
    Fds_profissional  : String;
    Fds_especialidade : String;
    Fnr_contato       : String;

  public
    property Conexao          : TFdConnection read FConexao     write FConexao;
    property Id_Profissional  : Integer read FId_Profissional   write FId_Profissional;
    property ds_profissional  : String read Fds_profissional    write Fds_profissional;
    property ds_especialidade : String read Fds_especialidade   write Fds_especialidade;
    property nr_contato       : String read Fnr_contato         write Fnr_contato;

    constructor Create(Conexao: TFdConnection);
    destructor Destroy; Override;

    function fncInserirAlterar(TipoOperacao: String; out Erro: String): Boolean;
    procedure prcDeleta(id_chave: Integer);
    function fncConsulta(texto: String): TFDQuery;
  End;

var
  QryConsulta: TFDQuery;

implementation

uses
  unitFuncoes;

{ TProfissionais }

constructor TProfissionais.Create(Conexao: TFdConnection);
begin
  FConexao := Conexao;

  QryConsulta := TFDQuery.Create(nil);
  QryConsulta.Connection := FConexao;
end;

destructor TProfissionais.Destroy;
begin
  QryConsulta.Destroy;
  inherited;
end;

function TProfissionais.fncConsulta(texto: String): TFDQuery;

begin
  try
    FConexao.Connected := False;
    FConexao.Connected := True;

    QryConsulta.Close;
    QryConsulta.SQL.Clear;

    QryConsulta.SQL.Add('select id_profissional, ds_profissional, ds_especialidade, nr_contato');
    QryConsulta.SQL.Add('from profissionais where ds_profissional like :p_texto');

    QryConsulta.ParamByName('p_texto').AsString := '%' + texto + '%';

    QryConsulta.Open;
  finally
    Result := QryConsulta;
  end;

end;

function TProfissionais.fncInserirAlterar(TipoOperacao: String;
  out Erro: String): Boolean;
var
  QryInserir: TFDQuery;
begin

  try
    try
      FConexao.Connected := False;
      FConexao.Connected := True;

      QryInserir := TFDQuery.Create(nil);
      QryInserir.Connection := FConexao;

      QryInserir.Close;
      QryInserir.SQL.Clear;

      if TipoOperacao = 'INSERIR' then
      begin
        QryInserir.SQL.Add('insert into profissionais (id_profissional, ds_profissionais, ds_especialidade, nr_contato)');
        QryInserir.SQL.Add('values (:p_id_profissional, :p_ds_profissional, :p_ds_especialidade, :p_nr_contato)');

        QryInserir.ParamByName('p_id_profissional').AsInteger := fncProximoCodigo('Profissionais', 'id_profissional');

      end
      else
      begin
        QryInserir.SQL.Add('update profissionais set ds_profissionais = :p_ds_profissional,');
        QryInserir.SQL.Add('ds_especialidade = :p_ds_especialidade, nr_contato = :p_nr_contato');
        QryInserir.SQL.Add('where id_profissional = :p_id_profissional');

        QryInserir.ParamByName('p_id_profissional').AsInteger := FId_Profissional;
      end;

      QryInserir.ParamByName('p_ds_profissional').AsString  := Fds_profissional;
      QryInserir.ParamByName('p_ds_especialidade').AsString := Fds_especialidade;
      QryInserir.ParamByName('p_nr_contato').AsString       := Fnr_contato;
      QryInserir.ExecSQL;

      Result := True;

      fncConsulta('');

    except
      on E: Exception do
      begin
        Erro := E.Message;
        Result := False;
      end;

    end;
  finally
    QryInserir.Destroy;
  end;

end;

procedure TProfissionais.prcDeleta(id_chave: Integer);
begin
  if funcCriarMensagem('Confirmar', 'Excluir Dados',
    'Tem certeza que deseja excluir esses dados ?',
    ExtractFilePath(Application.ExeName) + '\icons\alerta.bmp', 'CONFIRMA') then
  begin

    FConexao.Connected := False;
    FConexao.Connected := True;

    FConexao.ExecSQL
      ('Delete from profissionais where id_profissional = :id_chave',
      [id_chave]);

    fncConsulta('');
  end;

end;

end.
